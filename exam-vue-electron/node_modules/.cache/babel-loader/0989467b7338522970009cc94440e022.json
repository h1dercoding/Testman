{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\monitor\\Monitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\monitor\\Monitor.vue","mtime":1649769042000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\babel.config.js","mtime":1648627002000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport axios from 'axios';\nimport { message } from 'ant-design-vue';\nexport default {\n  name: 'Monitor',\n  data: function data() {\n    return {\n      checkInterval: null,\n      checkTimer: 1000,\n      // 检查摄像头是否开启的定时器 ms\n      authenticationInterval: null,\n      authenticationTimer: 30000,\n      // 身份验证的定时器 ms\n      isMonitoring: true,\n      canvasDataUrl: ''\n    };\n  },\n  methods: {\n    authSuccess: function authSuccess() {\n      message.success('身份验证成功');\n    },\n    authFail: function authFail() {\n      message.error('身份验证失败');\n    },\n    authFailExecute: function authFailExecute() {\n      message.warning('请开启摄像头以确保身份验证正常运行');\n    },\n    authNetFail: function authNetFail() {\n      message.warning('网络原因导致身份验证失败');\n    }\n  },\n  computed: {\n    base64Url: function base64Url() {\n      return this.canvasDataUrl.split('data:image/png;base64,')[1];\n    }\n  },\n  watch: {\n    canvasDataUrl: function canvasDataUrl(newVal, oldVal) {\n      var _this = this;\n\n      var val = newVal.split('data:image/png;base64,')[1];\n      axios({\n        method: 'POST',\n        url: 'http://localhost:5000/ai',\n        data: {\n          img: val\n        }\n      }).then(function (res) {\n        var text = res.data.text;\n\n        if (text !== 'Success') {\n          _this.authSuccess();\n        } else {\n          _this.authFail();\n        }\n      }).catch(function (err) {\n        _this.authNetFail();\n      });\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    var monitor = this.$refs['monitor'];\n    var canvas = this.$refs['photo'];\n    var pr = navigator.mediaDevices.getUserMedia({\n      audio: false,\n      video: true\n    });\n    pr.then(function (mediaStream) {\n      monitor.srcObject = mediaStream;\n      monitor.play();\n      _this2.isMonitoring = true;\n    }).catch(function (err) {\n      if (err.message == 'Requested device not found') {\n        _this2.isMonitoring = false;\n      }\n    }); // 每隔 2s 获取用户计算机摄像头权限\n\n    this.checkInterval = setInterval(function () {\n      var pr = navigator.mediaDevices.getUserMedia({\n        video: true\n      });\n      pr.then(function (mediaStream) {\n        // 若获取权限成功\n        // 若一开始（进入考试页面）就没有获取权限 || 中途摄像头不能正常工作\n        if (!monitor.srcObject || !monitor.srcObject.active) {\n          _this2.isMonitoring = true;\n          monitor.srcObject = mediaStream;\n          monitor.play();\n        }\n      }).catch(function (err) {\n        // 若获取权限失败\n        if (err.message === 'Requested device not found') {\n          _this2.isMonitoring = false;\n        }\n      });\n    }, this.checkTimer);\n    this.authenticationInterval = setInterval(function () {\n      // 若未获得摄像头权限\n      if (!_this2.isMonitoring) return _this2.authFailExecute();\n      canvas.getContext('2d').drawImage(monitor, 0, 0, 250, 160);\n      _this2.canvasDataUrl = canvas.toDataURL('image/png');\n    }, this.authenticationTimer);\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;AAaA;AACA;AACA;AAEA;AACAA,iBADA;AAEAC,MAFA,kBAEA;AACA;AACAC,yBADA;AAEAC,sBAFA;AAEA;AACAC,kCAHA;AAIAC,gCAJA;AAIA;AACAC,wBALA;AAMAC;AANA;AAQA,GAXA;AAYAC;AACAC,eADA,yBACA;AACAC;AACA,KAHA;AAIAC,YAJA,sBAIA;AACAD;AACA,KANA;AAOAE,mBAPA,6BAOA;AACAF;AACA,KATA;AAUAG,eAVA,yBAUA;AACAH;AACA;AAZA,GAZA;AA0BAI;AACAC,aADA,uBACA;AACA;AACA;AAHA,GA1BA;AA+BAC;AACAT,iBADA,yBACAU,MADA,EACAC,MADA,EACA;AAAA;;AAEA;AAEAC;AACAC,sBADA;AAEAC,uCAFA;AAGApB;AACAqB;AADA;AAHA,SAOAC,IAPA,CAOA;AACA;;AACA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA,OAdA,EAeAC,KAfA,CAeA;AACA;AACA,OAjBA;AAkBA;AAvBA,GA/BA;AAwDAC,SAxDA,qBAwDA;AAAA;;AACA;AACA;AAEA;AAAAC;AAAAC;AAAA;AAEAC;AACAC;AACAA;AACA;AACA,KAJA,EAIAL,KAJA,CAIA;AACA;AACA;AACA;AACA,KARA,EANA,CAgBA;;AACA;AACA;AAAAG;AAAA;AACAC;AACA;AACA;AACA;AACA;AACAC;AACAA;AACA;AACA,OARA,EAQAL,KARA,CAQA;AACA;AACA;AACA;AACA;AACA,OAbA;AAcA,KAhBA,EAgBA,eAhBA;AAkBA;AACA;AACA;AAEAM;AACA;AACA,KANA,EAMA,wBANA;AAOA;AAlGA","names":["name","data","checkInterval","checkTimer","authenticationInterval","authenticationTimer","isMonitoring","canvasDataUrl","methods","authSuccess","message","authFail","authFailExecute","authNetFail","computed","base64Url","watch","newVal","oldVal","axios","method","url","img","then","catch","mounted","audio","video","pr","monitor","canvas"],"sourceRoot":"src/views/monitor","sources":["Monitor.vue"],"sourcesContent":["<template>\n  <div>\n    <transition name=\"msgAnim\">\n      <div id=\"msg\" v-show=\"!isMonitoring\">\n        <a-alert message=\"请确保摄像头正常工作！\" type=\"error\" />\n      </div>\n    </transition>\n    <video ref=\"monitor\"></video>\n    <canvas ref=\"photo\"></canvas>\n  </div>\n</template>\n\n<script>\n/* eslint-disable */\nimport axios from 'axios'\nimport {message} from 'ant-design-vue';\n\nexport default {\n  name: 'Monitor',\n  data() {\n    return {\n      checkInterval: null,\n      checkTimer: 1000,  // 检查摄像头是否开启的定时器 ms\n      authenticationInterval: null,\n      authenticationTimer: 30000,  // 身份验证的定时器 ms\n      isMonitoring: true,\n      canvasDataUrl: '',\n    }\n  },\n  methods: {\n    authSuccess() {\n      message.success('身份验证成功');\n    },\n    authFail() {\n      message.error('身份验证失败')\n    },\n    authFailExecute() {\n      message.warning('请开启摄像头以确保身份验证正常运行')\n    },\n    authNetFail() {\n      message.warning('网络原因导致身份验证失败')\n    }\n  },\n  computed: {\n    base64Url() {\n      return this.canvasDataUrl.split('data:image/png;base64,')[1]\n    },\n  },\n  watch: {\n    canvasDataUrl(newVal, oldVal) {\n\n      const val = newVal.split('data:image/png;base64,')[1]\n\n      axios({\n        method: 'POST',\n        url: 'http://localhost:5000/ai',\n        data: {\n          img: val\n        }\n      })\n        .then((res) => {\n          const { text } = res.data\n          if (text !== 'Success') {\n            this.authSuccess();\n          } else {\n            this.authFail();\n          }\n        })\n        .catch((err) => {\n          this.authNetFail();\n        })\n    },\n  },\n  mounted() {\n    let monitor = this.$refs['monitor']\n    let canvas = this.$refs['photo']\n\n    let pr = navigator.mediaDevices.getUserMedia({ audio: false, video: true })\n\n    pr.then((mediaStream) => {\n      monitor.srcObject = mediaStream\n      monitor.play()\n      this.isMonitoring = true\n    }).catch((err) => {\n      if (err.message == 'Requested device not found') {\n        this.isMonitoring = false\n      }\n    })\n\n    // 每隔 2s 获取用户计算机摄像头权限\n    this.checkInterval = setInterval(() => {\n      let pr = navigator.mediaDevices.getUserMedia({ video: true })\n      pr.then((mediaStream) => {\n        // 若获取权限成功\n        // 若一开始（进入考试页面）就没有获取权限 || 中途摄像头不能正常工作\n        if (!monitor.srcObject || !monitor.srcObject.active) {\n          this.isMonitoring = true\n          monitor.srcObject = mediaStream\n          monitor.play()\n        }\n      }).catch((err) => {\n        // 若获取权限失败\n        if (err.message === 'Requested device not found') {\n          this.isMonitoring = false\n        }\n      })\n    }, this.checkTimer)\n\n    this.authenticationInterval = setInterval(() => {\n      // 若未获得摄像头权限\n      if (!this.isMonitoring) return this.authFailExecute();\n\n      canvas.getContext('2d').drawImage(monitor, 0, 0, 250, 160)\n      this.canvasDataUrl = canvas.toDataURL('image/png')\n    }, this.authenticationTimer)\n  },\n}\n</script>\n\n<style lang=\"less\" scoped>\ndiv {\n  width: 100%;\n  height: 100%;\n  position: relative;\n\n  video {\n    width: 100%;\n    height: 100%;\n    display: block;\n  }\n\n  canvas {\n    width: 100%;\n    height: 100%;\n    display: none;\n  }\n\n  #msg {\n    position: absolute;\n    width: 190px;\n    height: 40px;\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  }\n}\n\n// 进入起始&离开终点\n.msgAnim-enter,\n.msgAnim-leave-to {\n  transform: translate(-50%, -100%) !important;\n  opacity: 0;\n}\n\n.msgAnim-enter-active,\n.msgAnim-leave-active {\n  transition: 0.4s;\n}\n\n// 进入终点&离开起始\n.msgAnim-enter-to,\n.msgAnim-leave {\n  transform: translate(-50%, -50%) !important;\n  opacity: 1;\n}\n</style>"]}]}