{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\user\\Login.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\user\\Login.vue","mtime":1648627002000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\babel.config.js","mtime":1648627002000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"C:/Users/17982/Desktop/Testman/exam-vue-electron/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport TwoStepCaptcha from \"../../components/tools/TwoStepCaptcha\";\nimport { mapActions } from 'vuex';\nimport { timeFix } from \"../../utils/util\";\nimport { getSmsCaptcha, get2step } from \"../../api/login\";\nexport default {\n  components: {\n    TwoStepCaptcha: TwoStepCaptcha\n  },\n  data: function data() {\n    return {\n      customActiveKey: 'tab1',\n      loginBtn: false,\n      // login type: 0 email, 1 username, 2 telephone\n      loginType: 0,\n      requiredTwoStepCaptcha: false,\n      stepCaptchaVisible: false,\n      form: this.$form.createForm(this),\n      state: {\n        time: 60,\n        loginBtn: false,\n        // login type: 0 email, 1 username, 2 telephone\n        loginType: 0,\n        smsSendBtn: false\n      }\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    get2step({}).then(function (res) {\n      _this.requiredTwoStepCaptcha = res.result.stepCode;\n    }).catch(function () {\n      _this.requiredTwoStepCaptcha = false;\n    }); // this.requiredTwoStepCaptcha = true\n  },\n  methods: _objectSpread(_objectSpread({}, mapActions(['Login', 'Logout'])), {}, {\n    // 这个是从Vuex中直接继承过来，从而可以当本地方法用，见store/modules/user.js\n    // handler\n    handleUsernameOrEmail: function handleUsernameOrEmail(rule, value, callback) {\n      var state = this.state;\n      var regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/;\n\n      if (regex.test(value)) {\n        state.loginType = 0;\n      } else {\n        state.loginType = 1;\n      }\n\n      callback();\n    },\n    handleTabClick: function handleTabClick(key) {\n      this.customActiveKey = key; // this.form.resetFields()\n    },\n    handleSubmit: function handleSubmit(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var validateFields = this.form.validateFields,\n          state = this.state,\n          customActiveKey = this.customActiveKey,\n          Login = this.Login;\n      state.loginBtn = true;\n      var validateFieldsKey = customActiveKey === 'tab1' ? ['username', 'password'] : ['mobile', 'captcha'];\n      validateFields(validateFieldsKey, {\n        force: true\n      }, function (err, values) {\n        console.log(values); // 打印用户的登录参数\n\n        if (!err) {\n          var loginParams = {}; // 声明登录的参数\n          // delete loginParams.username\n          // loginParams[!state.loginType ? 'email' : 'username'] = values.username\n\n          loginParams.loginType = state.loginType; // 登录类型，0 email, 1 username\n\n          loginParams.userInfo = values.username; // 设置用户信息，因为email还是username不确定，所以用userinfo字段来代替\n\n          loginParams.password = values.password; // 用户的密码，无加密\n\n          console.log(loginParams);\n          Login(loginParams) // 请求登录接口\n          .then(function (res) {\n            return _this2.loginSuccess(res);\n          }) // 成功\n          .catch(function (err) {\n            return _this2.requestFailed(err);\n          }) // 失败\n          .finally(function () {\n            state.loginBtn = false; // 不管登录成功与否，都要把按钮置灰，防止用户重复点击\n          });\n        } else {\n          setTimeout(function () {\n            state.loginBtn = false;\n          }, 600);\n        }\n      });\n    },\n    getCaptcha: function getCaptcha(e) {\n      var _this3 = this;\n\n      e.preventDefault();\n      var validateFields = this.form.validateFields,\n          state = this.state;\n      validateFields(['mobile'], {\n        force: true\n      }, function (err, values) {\n        if (!err) {\n          state.smsSendBtn = true;\n          var interval = window.setInterval(function () {\n            if (state.time-- <= 0) {\n              state.time = 60;\n              state.smsSendBtn = false;\n              window.clearInterval(interval);\n            }\n          }, 1000);\n\n          var hide = _this3.$message.loading('验证码发送中..', 0);\n\n          getSmsCaptcha({\n            mobile: values.mobile\n          }).then(function (res) {\n            setTimeout(hide, 2500);\n\n            _this3.$notification['success']({\n              message: '提示',\n              description: '验证码获取成功，您的验证码为：' + res.result.captcha,\n              duration: 8\n            });\n          }).catch(function (err) {\n            setTimeout(hide, 1);\n            clearInterval(interval);\n            state.time = 60;\n            state.smsSendBtn = false;\n\n            _this3.requestFailed(err);\n          });\n        }\n      });\n    },\n    stepCaptchaSuccess: function stepCaptchaSuccess() {\n      this.loginSuccess();\n    },\n    stepCaptchaCancel: function stepCaptchaCancel() {\n      var _this4 = this;\n\n      this.Logout().then(function () {\n        _this4.loginBtn = false;\n        _this4.stepCaptchaVisible = false;\n      });\n    },\n    loginSuccess: function loginSuccess(res) {\n      var _this5 = this;\n\n      console.log(res);\n      this.$router.push('/list/exam-record-list'); // 延迟 1 秒显示欢迎信息\n\n      setTimeout(function () {\n        _this5.$notification.success({\n          message: '欢迎',\n          description: \"\".concat(timeFix(), \"\\uFF0C\\u6B22\\u8FCE\\u56DE\\u6765\")\n        });\n      }, 1000);\n    },\n    requestFailed: function requestFailed(err) {\n      this.$notification['error']({\n        message: '错误',\n        description: ((err.response || {}).data || {}).message || '用户名或密码错误',\n        duration: 4\n      });\n    }\n  })\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0EA;AACA;AACA;AACA;AAEA;AACAA;AACAC;AADA,GADA;AAIAC,MAJA,kBAIA;AACA;AACAC,6BADA;AAEAC,qBAFA;AAGA;AACAC,kBAJA;AAKAC,mCALA;AAMAC,+BANA;AAOAC,uCAPA;AAQAC;AACAC,gBADA;AAEAN,uBAFA;AAGA;AACAC,oBAJA;AAKAM;AALA;AARA;AAgBA,GArBA;AAsBAC,SAtBA,qBAsBA;AAAA;;AACAC,iBACAC,IADA,CACA;AACA;AACA,KAHA,EAIAC,KAJA,CAIA;AACA;AACA,KANA,EADA,CAQA;AACA,GA/BA;AAgCAC,2CACAC,+BADA;AACA;AACA;AACAC,yBAHA,iCAGAC,IAHA,EAGAC,KAHA,EAGAC,QAHA,EAGA;AACA;AACA;;AACA;AACAZ;AACA,OAFA,MAEA;AACAA;AACA;;AACAY;AACA,KAZA;AAaAC,kBAbA,0BAaAC,GAbA,EAaA;AACA,iCADA,CAEA;AACA,KAhBA;AAiBAC,gBAjBA,wBAiBAC,CAjBA,EAiBA;AAAA;;AACAA;AACA,UACAC,cADA,GAKA,IALA,CACAlB,IADA,CACAkB,cADA;AAAA,UAEAjB,KAFA,GAKA,IALA,CAEAA,KAFA;AAAA,UAGAN,eAHA,GAKA,IALA,CAGAA,eAHA;AAAA,UAIAwB,KAJA,GAKA,IALA,CAIAA,KAJA;AAOAlB;AAEA;AAEAiB;AAAAE;AAAA;AACAC,4BADA,CACA;;AACA;AACA,+BADA,CACA;AACA;AACA;;AACAC,kDAJA,CAIA;;AACAA,iDALA,CAKA;;AACAA,iDANA,CAMA;;AACAD;AACAF;AAAA,WACAb,IADA,CACA;AAAA;AAAA,WADA,EACA;AADA,WAEAC,KAFA,CAEA;AAAA;AAAA,WAFA,EAEA;AAFA,WAGAgB,OAHA,CAGA;AACAtB,mCADA,CACA;AACA,WALA;AAMA,SAdA,MAcA;AACAuB;AACAvB;AACA,WAFA,EAEA,GAFA;AAGA;AACA,OArBA;AAsBA,KApDA;AAqDAwB,cArDA,sBAqDAR,CArDA,EAqDA;AAAA;;AACAA;AACA;AAAA;AAEAC;AAAAE;AAAA;AACA;AACAnB;AAEA;AACA;AACAA;AACAA;AACAyB;AACA;AACA,WANA,EAMA,IANA;;AAQA;;AACAC;AAAAC;AAAA;AACAJ;;AACA;AACAK,2BADA;AAEAC,iEAFA;AAGAC;AAHA;AAKA,WAPA,EAOAxB,KAPA,CAOA;AACAiB;AACAQ;AACA/B;AACAA;;AACA;AACA,WAbA;AAcA;AACA,OA5BA;AA6BA,KAtFA;AAuFAgC,sBAvFA,gCAuFA;AACA;AACA,KAzFA;AA0FAC,qBA1FA,+BA0FA;AAAA;;AACA;AACA;AACA;AACA,OAHA;AAIA,KA/FA;AAgGAC,gBAhGA,wBAgGAC,GAhGA,EAgGA;AAAA;;AACAf;AACA,kDAFA,CAGA;;AACAG;AACA;AACAK,uBADA;AAEAC;AAFA;AAIA,OALA,EAKA,IALA;AAMA,KA1GA;AA2GAO,iBA3GA,yBA2GAC,GA3GA,EA2GA;AACA;AACAT,qBADA;AAEAC,4EAFA;AAGAC;AAHA;AAKA;AAjHA;AAhCA","names":["components","TwoStepCaptcha","data","customActiveKey","loginBtn","loginType","requiredTwoStepCaptcha","stepCaptchaVisible","form","state","time","smsSendBtn","created","get2step","then","catch","methods","mapActions","handleUsernameOrEmail","rule","value","callback","handleTabClick","key","handleSubmit","e","validateFields","Login","force","console","loginParams","finally","setTimeout","getCaptcha","window","getSmsCaptcha","mobile","message","description","duration","clearInterval","stepCaptchaSuccess","stepCaptchaCancel","loginSuccess","res","requestFailed","err"],"sourceRoot":"src/views/user","sources":["Login.vue"],"sourcesContent":["<template>\r\n  <div class=\"main\">\r\n    <a-form\r\n      id=\"formLogin\"\r\n      class=\"user-layout-login\"\r\n      ref=\"formLogin\"\r\n      :form=\"form\"\r\n      @submit=\"handleSubmit\"\r\n    >\r\n      <a-tabs\r\n        :activeKey=\"customActiveKey\"\r\n        :tabBarStyle=\"{ textAlign: 'center', borderBottom: 'unset' }\"\r\n        @change=\"handleTabClick\"\r\n      >\r\n        <a-tab-pane key=\"tab1\" tab=\"在线考试系统登录\">\r\n          <a-form-item>\r\n            <a-input\r\n              size=\"large\"\r\n              type=\"text\"\r\n              placeholder=\"请输入帐户名/邮箱/手机号\"\r\n              v-decorator=\"[\r\n                'username',\r\n                {rules: [{ required: true, message: '请输入帐户名/邮箱/手机号' }, { validator: handleUsernameOrEmail }], validateTrigger: 'change'}\r\n              ]\"\r\n            >\r\n              <a-icon slot=\"prefix\" type=\"user\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n            </a-input>\r\n          </a-form-item>\r\n\r\n          <a-form-item>\r\n            <a-input\r\n              size=\"large\"\r\n              type=\"password\"\r\n              autocomplete=\"false\"\r\n              placeholder=\"请输入密码\"\r\n              v-decorator=\"[\r\n                'password',\r\n                {rules: [{ required: true, message: '请输入密码' }], validateTrigger: 'blur'}\r\n              ]\"\r\n            >\r\n              <a-icon slot=\"prefix\" type=\"lock\" :style=\"{ color: 'rgba(0,0,0,.25)' }\"/>\r\n            </a-input>\r\n          </a-form-item>\r\n        </a-tab-pane>\r\n      </a-tabs>\r\n\r\n      <a-form-item>\r\n        <a-checkbox v-decorator=\"['rememberMe']\">自动登录</a-checkbox>\r\n        <router-link class=\"register\" :to=\"{ name: 'register' }\" style=\"float: right;\">注册账户</router-link>\r\n      </a-form-item>\r\n\r\n      <a-form-item style=\"margin-top:24px\">\r\n        <a-button\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          class=\"login-button\"\r\n          :loading=\"state.loginBtn\"\r\n          :disabled=\"state.loginBtn\"\r\n        >确定\r\n        </a-button>\r\n      </a-form-item>\r\n    </a-form>\r\n\r\n    <two-step-captcha\r\n      v-if=\"requiredTwoStepCaptcha\"\r\n      :visible=\"stepCaptchaVisible\"\r\n      @success=\"stepCaptchaSuccess\"\r\n      @cancel=\"stepCaptchaCancel\"\r\n    ></two-step-captcha>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport TwoStepCaptcha from '../../components/tools/TwoStepCaptcha'\r\nimport { mapActions } from 'vuex'\r\nimport { timeFix } from '../../utils/util'\r\nimport { getSmsCaptcha, get2step } from '../../api/login'\r\n\r\nexport default {\r\n  components: {\r\n    TwoStepCaptcha\r\n  },\r\n  data () {\r\n    return {\r\n      customActiveKey: 'tab1',\r\n      loginBtn: false,\r\n      // login type: 0 email, 1 username, 2 telephone\r\n      loginType: 0,\r\n      requiredTwoStepCaptcha: false,\r\n      stepCaptchaVisible: false,\r\n      form: this.$form.createForm(this),\r\n      state: {\r\n        time: 60,\r\n        loginBtn: false,\r\n        // login type: 0 email, 1 username, 2 telephone\r\n        loginType: 0,\r\n        smsSendBtn: false\r\n      }\r\n    }\r\n  },\r\n  created () {\r\n    get2step({})\r\n      .then(res => {\r\n        this.requiredTwoStepCaptcha = res.result.stepCode\r\n      })\r\n      .catch(() => {\r\n        this.requiredTwoStepCaptcha = false\r\n      })\r\n    // this.requiredTwoStepCaptcha = true\r\n  },\r\n  methods: {\r\n    ...mapActions(['Login', 'Logout']), // 这个是从Vuex中直接继承过来，从而可以当本地方法用，见store/modules/user.js\r\n    // handler\r\n    handleUsernameOrEmail (rule, value, callback) {\r\n      const { state } = this\r\n      const regex = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((\\.[a-zA-Z0-9_-]{2,3}){1,2})$/\r\n      if (regex.test(value)) {\r\n        state.loginType = 0\r\n      } else {\r\n        state.loginType = 1\r\n      }\r\n      callback()\r\n    },\r\n    handleTabClick (key) {\r\n      this.customActiveKey = key\r\n      // this.form.resetFields()\r\n    },\r\n    handleSubmit (e) {\r\n      e.preventDefault()\r\n      const {\r\n        form: { validateFields },\r\n        state,\r\n        customActiveKey,\r\n        Login\r\n      } = this\r\n\r\n      state.loginBtn = true\r\n\r\n      const validateFieldsKey = customActiveKey === 'tab1' ? ['username', 'password'] : ['mobile', 'captcha']\r\n\r\n      validateFields(validateFieldsKey, { force: true }, (err, values) => {\r\n        console.log(values) // 打印用户的登录参数\r\n        if (!err) {\r\n          const loginParams = {} // 声明登录的参数\r\n          // delete loginParams.username\r\n          // loginParams[!state.loginType ? 'email' : 'username'] = values.username\r\n          loginParams.loginType = state.loginType // 登录类型，0 email, 1 username\r\n          loginParams.userInfo = values.username // 设置用户信息，因为email还是username不确定，所以用userinfo字段来代替\r\n          loginParams.password = values.password // 用户的密码，无加密\r\n          console.log(loginParams)\r\n          Login(loginParams) // 请求登录接口\r\n            .then((res) => this.loginSuccess(res)) // 成功\r\n            .catch(err => this.requestFailed(err)) // 失败\r\n            .finally(() => {\r\n              state.loginBtn = false // 不管登录成功与否，都要把按钮置灰，防止用户重复点击\r\n            })\r\n        } else {\r\n          setTimeout(() => {\r\n            state.loginBtn = false\r\n          }, 600)\r\n        }\r\n      })\r\n    },\r\n    getCaptcha (e) {\r\n      e.preventDefault()\r\n      const { form: { validateFields }, state } = this\r\n\r\n      validateFields(['mobile'], { force: true }, (err, values) => {\r\n        if (!err) {\r\n          state.smsSendBtn = true\r\n\r\n          const interval = window.setInterval(() => {\r\n            if (state.time-- <= 0) {\r\n              state.time = 60\r\n              state.smsSendBtn = false\r\n              window.clearInterval(interval)\r\n            }\r\n          }, 1000)\r\n\r\n          const hide = this.$message.loading('验证码发送中..', 0)\r\n          getSmsCaptcha({ mobile: values.mobile }).then(res => {\r\n            setTimeout(hide, 2500)\r\n            this.$notification['success']({\r\n              message: '提示',\r\n              description: '验证码获取成功，您的验证码为：' + res.result.captcha,\r\n              duration: 8\r\n            })\r\n          }).catch(err => {\r\n            setTimeout(hide, 1)\r\n            clearInterval(interval)\r\n            state.time = 60\r\n            state.smsSendBtn = false\r\n            this.requestFailed(err)\r\n          })\r\n        }\r\n      })\r\n    },\r\n    stepCaptchaSuccess () {\r\n      this.loginSuccess()\r\n    },\r\n    stepCaptchaCancel () {\r\n      this.Logout().then(() => {\r\n        this.loginBtn = false\r\n        this.stepCaptchaVisible = false\r\n      })\r\n    },\r\n    loginSuccess (res) {\r\n      console.log(res)\r\n      this.$router.push('/list/exam-record-list')\r\n      // 延迟 1 秒显示欢迎信息\r\n      setTimeout(() => {\r\n        this.$notification.success({\r\n          message: '欢迎',\r\n          description: `${timeFix()}，欢迎回来`\r\n        })\r\n      }, 1000)\r\n    },\r\n    requestFailed (err) {\r\n      this.$notification['error']({\r\n        message: '错误',\r\n        description: ((err.response || {}).data || {}).message || '用户名或密码错误',\r\n        duration: 4\r\n      })\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style lang=\"less\" scoped>\r\n  .user-layout-login {\r\n    label {\r\n      font-size: 14px;\r\n    }\r\n\r\n    .getCaptcha {\r\n      display: block;\r\n      width: 100%;\r\n      height: 40px;\r\n    }\r\n\r\n    .forge-password {\r\n      font-size: 14px;\r\n    }\r\n\r\n    button.login-button {\r\n      padding: 0 15px;\r\n      font-size: 16px;\r\n      height: 40px;\r\n      width: 100%;\r\n    }\r\n\r\n    .user-login-other {\r\n      text-align: left;\r\n      margin-top: 24px;\r\n      line-height: 22px;\r\n\r\n      .item-icon {\r\n        font-size: 24px;\r\n        color: rgba(0, 0, 0, 0.2);\r\n        margin-left: 16px;\r\n        vertical-align: middle;\r\n        cursor: pointer;\r\n        transition: color 0.3s;\r\n\r\n        &:hover {\r\n          color: #1890ff;\r\n        }\r\n      }\r\n\r\n      .register {\r\n        float: right;\r\n      }\r\n    }\r\n  }\r\n</style>\r\n"]}]}