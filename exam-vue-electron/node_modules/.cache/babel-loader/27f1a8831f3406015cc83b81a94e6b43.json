{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue","mtime":1649699772000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\babel.config.js","mtime":1648627002000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"C:/Users/17982/Desktop/Testman/exam-vue-electron/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"C:/Users/17982/Desktop/Testman/exam-vue-electron/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam, getSubDetail, finishSub } from \"../../api/exam\";\nimport UserMenu from \"../../components/tools/UserMenu\";\nimport { mapGetters } from 'vuex'; // 高亮\n\nimport Highlighter from 'web-highlighter';\nimport HighlighterBar from \"../highlighter/HighlighterBar\";\nimport HighlighterButton from \"../highlighter/HighlighterButton\"; // 监考\n\nimport Monitor from \"../monitor/Monitor\"; // 考试工具\n\nimport ExamTools from \"../examTools/ExamTools\";\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu,\n    HighlighterBar: HighlighterBar,\n    HighlighterButton: HighlighterButton,\n    Monitor: Monitor,\n    ExamTools: ExamTools\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 剩余时间记录\n      remainingTime: {\n        hour: 0,\n        minute: 0,\n        second: 0\n      },\n      // 交卷按钮loading (防止重复点击\n      handInButtonLoading: false,\n      // 高亮对象\n      highlighter: new Highlighter({\n        exceptSelectors: ['.ant-message span', '#examTools p'] // 主要防止 antd 的 message 提醒的文本被选中\n\n      }),\n      // 抽屉工具箱对象\n      highlighterBarDetail: {\n        visible: false,\n        enable: false\n      },\n      // 主观题详情对象\n      subDetail: {},\n      subMap: {},\n      openKeys: ['question_radio'],\n      rootSubmenuKeys: ['question_radio', 'question_check', 'question_judge', 'question_input', 'question_short_answer', 'question_program'],\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      inputValue: '',\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      },\n      onblurTime: 0,\n      isFinished: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.subMap = new Map();\n    this.answersMap = new Map();\n    var that = this; // 从后端获取考试的详细信息，渲染到考试详情里\n\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        console.log(res);\n        that.examDetail = res.data;\n        console.log('@examDetail', _this.examDetail);\n\n        _this.initRemainingTime(_this.examDetail.exam.examTotalTime);\n\n        console.log('remainingTime@', that.remainingTime);\n        that.initExam(); // 若考试界面失焦两次则自动交卷\n\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n    getSubDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        console.log(res);\n        that.subDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取主观题详情失败',\n          description: res.msg\n        });\n      }\n    }); // 开倒计时定时器\n\n    this.remainingTimer = setInterval(function () {\n      _this.remainingTime.second--;\n    }, 1000); // 运行文本高亮\n    // this.highlighter = new Highlighter({\n    //   // exceptSelectors: []\n    // })\n    // getRemoteData().then(s => highlighter.fromStore(s.startMeta, s.endMeta, s.id, s.text))\n    // highlighter.on(Highlighter.event.CREATE, ({sources}) => save(sources))\n    // 开启摄像头\n  },\n  methods: _objectSpread(_objectSpread({\n    initExam: function initExam() {\n      var that = this;\n\n      window.onblur = function () {\n        that.onblurTime++;\n\n        if (!that.isFinished) {\n          if (that.onblurTime === 3) {\n            that.$notification.success({\n              message: '你已交卷！'\n            });\n            that.finishExam();\n          } else {\n            that.$notification.error({\n              message: '考试期间不能离开此页面哦~这一次只是提醒，下次离开就会直接交卷了哦！'\n            });\n          }\n        }\n      };\n    }\n  }, mapGetters(['nickname', 'avatar'])), {}, {\n    getQuestionDetail: function getQuestionDetail(questionId, questionType) {\n      var _this2 = this;\n\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this; // 清空问题绑定的值\n\n      this.radioValue = '';\n      this.checkValues = [];\n\n      _getQuestionDetail(questionId, questionType).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n    getSubDetail: function getSubDetail(sub) {\n      var that = this;\n      that.inputValue = '';\n      that.currentQuestion = sub; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n      if (that.subMap.get(that.currentQuestion.id)) {\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer;\n      }\n\n      console.log(that.currentQuestion);\n    },\n    saveAnswer: function saveAnswer() {\n      this.currentQuestion.answer = this.inputValue;\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion);\n      console.log(this.subMap);\n    },\n    OnInputChange: function OnInputChange(e) {\n      this.currentQuestion.answer = this.inputValue;\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion);\n    },\n    onOpenChange: function onOpenChange(openKeys) {\n      var _this3 = this;\n\n      var latestOpenKey = openKeys.find(function (key) {\n        return _this3.openKeys.indexOf(key) === -1;\n      });\n\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys;\n      } else {\n        this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n      }\n    },\n\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value); // 更新做题者选择的答案\n\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = Object.create(null);\n\n      var _iterator = _createForOfIteratorHelper(strMap),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              k = _step$value[0],\n              v = _step$value[1];\n\n          obj[k] = v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return obj;\n    },\n\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return JSON.stringify(this._strMapToObj(map));\n    },\n\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this4 = this;\n\n      this.handInButtonLoading = true; // Todo:向后端提交作答信息数组answersMap\n\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          finishSub(res.data.examRecordId, _this4._mapToJson(_this4.subMap)).then(function (res) {\n            if (res.code === 0) {\n              _this4.$notification.success({\n                message: '考卷提交成功！',\n                description: res.msg\n              });\n\n              _this4.isFinished = true; // 清除定时器\n\n              clearInterval(_this4.remainingTimer);\n\n              _this4.$router.push('/list/exam-record-list');\n\n              return res.data;\n            } else {\n              _this4.handInButtonLoading = false;\n              _this4.onblurTime = 0;\n\n              _this4.$notification.error({\n                message: '交卷失败！',\n                description: res.msg\n              });\n            }\n          });\n\n          _this4.$notification.success({\n            message: '考卷提交成功！',\n            description: res.msg\n          });\n\n          return res.data;\n        } else {\n          _this4.onblurTime = 0;\n\n          _this4.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    },\n    initRemainingTime: function initRemainingTime(totalMinute) {\n      this.remainingTime.hour = Math.floor(totalMinute / 60);\n      this.remainingTime.minute = totalMinute % 60;\n    },\n\n    /**\r\n     * 高亮工具箱\r\n     */\n    // showHighlighterBar(isVisible) {\n    //   this.highlighterBarDetail.visible = isVisible\n    // },\n    // closeHighlighterBar() {\n    //   this.highlighterBarDetail.visible = false\n    // },\n    changeHighlighterBarVisible: function changeHighlighterBarVisible(value) {\n      this.highlighterBarDetail.visible = value;\n    },\n    changeHighlighterBarEnable: function changeHighlighterBarEnable() {\n      this.highlighterBarDetail.enable = !this.highlighterBarDetail.enable;\n    },\n    changeHighlighterStyle: function changeHighlighterStyle(className) {\n      this.highlighter.painter.options.className = className;\n    }\n  }),\n  computed: {\n    // remainingTime: { minute: 0, second: 0 }\n    remainingTimeStr: function remainingTimeStr() {\n      var paddingZero = function paddingZero(num) {\n        return num >= 10 ? num : \"0\".concat(num);\n      };\n\n      var _this$remainingTime = this.remainingTime,\n          hour = _this$remainingTime.hour,\n          minute = _this$remainingTime.minute,\n          second = _this$remainingTime.second;\n      return \"\".concat(paddingZero(hour), \":\").concat(paddingZero(minute), \":\").concat(paddingZero(second));\n    }\n  },\n  watch: {\n    remainingTime: {\n      handler: function handler(newVal, oldVal) {\n        var hour = newVal.hour,\n            minute = newVal.minute,\n            second = newVal.second;\n\n        if (hour == 0 && minute == 0 && second == 0) {\n          return this.finishExam();\n        }\n\n        if (second < 0) {\n          newVal.second = 59;\n          newVal.minute--;\n        }\n\n        if (minute < 0) {\n          newVal.minute = 59;\n          newVal.hour--;\n        }\n\n        if (hour < 0) {\n          newVal.hour = 23;\n        }\n      },\n      deep: true\n    },\n    highlighterBarDetail: {\n      handler: function handler(newVal, oldVal) {\n        if (!this.highlighter) return;\n\n        if (newVal.enable) {\n          this.highlighter.run();\n        } else {\n          this.highlighter.stop();\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.highlighterBarDetail.enable = false;\n    next();\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.remainingTimer);\n  }\n};",{"version":3,"mappings":"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AACA;AACAC;AACA;AACA;AACA1B,kCADA;AAEAC;AAFA;;AAIA,uCALA,CAMA;;AACA0B;;AACA;;AACA;AACA,aAVA,MAUA;AACA;AACA;;AACA;AACA3B,gCADA;AAEAC;AAFA;AAIA;AACA,WAnBA;;AAoBA;AACAD,8BADA;AAEAC;AAFA;;AAIA;AACA,SA1BA,MA0BA;AACA;;AACA;AACAD,4BADA;AAEAC;AAFA;AAIA;AACA,OAlCA;AAmCA,KArJA;AAsJA2B,qBAtJA,6BAsJAC,WAtJA,EAsJA;AACA;AACA;AACA,KAzJA;;AA2JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,+BApKA,uCAoKAC,KApKA,EAoKA;AACA;AACA,KAtKA;AAuKAC,8BAvKA,wCAuKA;AACA;AACA,KAzKA;AA0KAC,0BA1KA,kCA0KAC,SA1KA,EA0KA;AACA;AACA;AA5KA,IAzGA;AAuRAC;AACA;AACAC,oBAFA,8BAEA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAPA,GAvRA;AAgSAC;AACAnE;AACAoE,aADA,mBACAC,MADA,EACAC,MADA,EACA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;;AAEA;AACAD;AACAA;AACA;;AACA;AACAA;AACAA;AACA;;AACA;AACAA;AACA;AACA,OAnBA;AAoBAE;AApBA,KADA;AAuBAhE;AACA6D,aADA,mBACAC,MADA,EACAC,MADA,EACA;AACA;;AAEA;AACA;AACA,SAFA,MAEA;AACA;AACA;AACA,OATA;AAUAC,gBAVA;AAWAC;AAXA;AAvBA,GAhSA;AAqUAC,kBArUA,4BAqUAC,EArUA,EAqUAC,IArUA,EAqUAC,IArUA,EAqUA;AACA;AACAA;AACA,GAxUA;AAyUAC,eAzUA,2BAyUA;AACApB;AACA;AA3UA","names":["name","components","UserMenu","HighlighterBar","HighlighterButton","Monitor","ExamTools","data","examDetail","remainingTime","hour","minute","second","handInButtonLoading","highlighter","exceptSelectors","highlighterBarDetail","visible","enable","subDetail","subMap","openKeys","rootSubmenuKeys","answersMap","currentQuestion","radioValue","checkValues","inputValue","optionStyle","display","height","lineHeight","marginLeft","onblurTime","isFinished","mounted","getExamDetail","console","that","message","description","getSubDetail","methods","initExam","window","mapGetters","getQuestionDetail","questionId","questionType","Object","sub","saveAnswer","OnInputChange","e","onOpenChange","onRadioChange","userOptions","onCheckChange","checkedValues","_strMapToObj","strMap","obj","_mapToJson","map","finishExam","finishSub","clearInterval","initRemainingTime","totalMinute","changeHighlighterBarVisible","value","changeHighlighterBarEnable","changeHighlighterStyle","className","computed","remainingTimeStr","watch","handler","newVal","oldVal","deep","immediate","beforeRouteLeave","to","from","next","beforeDestroy"],"sourceRoot":"src/views/list","sources":["ExamDetail.vue"],"sourcesContent":["<template>\r\n  <!-- eslint-disable -->\r\n  <a-layout>\r\n    <a-layout-header class=\"header\" style=\"color: #fff; user-select: none; position: relative\">\r\n      <!--   v-if=\"examDetail.exam\" 是为了防止 异步请求时页面渲染的时候还没有拿到这个值而报错， 下面多处这个判断都是这个道理 -->\r\n      <span style=\"font-size: 25px; margin-left: 0px\" v-if=\"examDetail.exam\">\r\n        <!--        <a-avatar slot=\"avatar\" size=\"large\" shape=\"circle\" :src=\"examDetail.exam.examAvatar | imgSrcFilter\"/>-->\r\n        {{ examDetail.exam.examSource }}\r\n        <span style=\"font-size: 15px\">{{ examDetail.exam.examDescription }} </span>\r\n      </span>\r\n      <div id=\"monitor\">\r\n        <Monitor />\r\n      </div>\r\n      <span style=\"float: right\">\r\n        <span style=\"margin-right: 60px; font-size: 20px\" v-if=\"examDetail.exam\"\r\n          >考试限时：{{ examDetail.exam.examTotalTime }}分钟 {{ remainingTimeStr }}</span\r\n        >\r\n        <a-button type=\"danger\" ghost style=\"margin-right: 60px\" @click=\"finishExam()\" :loading=\"handInButtonLoading\"\r\n          >交卷</a-button\r\n        >\r\n        <a-avatar class=\"avatar\" size=\"small\" :src=\"avatar()\" />\r\n        <span style=\"margin-left: 12px\">{{ nickname() }}</span>\r\n      </span>\r\n    </a-layout-header>\r\n    <a-layout>\r\n      <a-layout-sider\r\n        width=\"220\"\r\n        :style=\"{ background: '#444', overflow: 'auto', height: '95vh', position: 'fixed', left: 0 }\"\r\n      >\r\n        <a-menu\r\n          mode=\"inline\"\r\n          :open-keys=\"openKeys\"\r\n          @openChange=\"onOpenChange\"\r\n          :defaultSelectedKeys=\"['1']\"\r\n          :defaultOpenKeys=\"['question_radio']\"\r\n          :style=\"{ height: '100%', borderRight: 0 }\"\r\n        >\r\n          <a-sub-menu key=\"question_radio\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"check-circle\" theme=\"twoTone\" />单选题(每题{{ currentQuestion.sqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in examDetail.radioIds\"\r\n              :key=\"item\"\r\n              @click=\"getQuestionDetail(item, 1)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_check\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"check-square\" theme=\"twoTone\" />多选题(每题{{ currentQuestion.mqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in examDetail.checkIds\"\r\n              :key=\"item\"\r\n              @click=\"getQuestionDetail(item, 2)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_judge\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"like\" theme=\"twoTone\" />判断题(每题{{ currentQuestion.jqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in examDetail.judgeIds\"\r\n              :key=\"item\"\r\n              @click=\"getQuestionDetail(item, 3)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"answersMap.get(item)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_input\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"eye\" theme=\"twoTone\" />填空题(每题{{ currentQuestion.iqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in subDetail\"\r\n              :key=\"index\"\r\n              v-if=\"item.type === '填空题'\"\r\n              @click=\"getSubDetail(item)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"subMap.get(item.id)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_short_answer\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"eye\" theme=\"twoTone\" />简答题(每题{{ currentQuestion.saqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in subDetail\"\r\n              :key=\"index\"\r\n              v-if=\"item.type === '简答题'\"\r\n              @click=\"getSubDetail(item)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"subMap.get(item.id)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n          <a-sub-menu key=\"question_program\">\r\n            <span slot=\"title\" v-if=\"examDetail.exam\" style=\"user-select: none\"\r\n              ><a-icon type=\"eye\" theme=\"twoTone\" />程序题(每题{{ currentQuestion.pqScore }}分)</span\r\n            >\r\n            <a-menu-item\r\n              v-for=\"(item, index) in subDetail\"\r\n              :key=\"index\"\r\n              v-if=\"item.type === '程序题'\"\r\n              @click=\"getSubDetail(item)\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#52c41a\" v-if=\"subMap.get(item.id)\" />\r\n              题目{{ index + 1 }}\r\n            </a-menu-item>\r\n          </a-sub-menu>\r\n        </a-menu>\r\n      </a-layout-sider>\r\n      <a-layout :style=\"{ marginLeft: '230px' }\">\r\n        <a-layout-content id=\"questionContent\" :style=\"{ margin: '24px 16px 0', height: '84vh', overflow: 'initial' }\">\r\n          <HighlighterBar\r\n            :visible=\"highlighterBarDetail.visible\"\r\n            :enable=\"highlighterBarDetail.enable\"\r\n            @changeVisible=\"changeHighlighterBarVisible\"\r\n            @changeEnable=\"changeHighlighterBarEnable\"\r\n            @changeHighlighterStyle=\"changeHighlighterStyle\"\r\n          />\r\n          <div :style=\"{ padding: '24px', background: '#fff', height: '84vh' }\">\r\n            <span v-show=\"currentQuestion === ''\" style=\"font-size: 30px; font-family: Consolas; user-select: none\"\r\n              >欢迎参加考试，请点击左侧题目编号开始答题</span\r\n            >\r\n            <strong style=\"user-select: none\">{{ currentQuestion.type }} </strong>\r\n            <p v-html=\"currentQuestion.name\"></p>\r\n            <!-- 单选题和判断题 -->\r\n            <!-- key不重复只需要在一个for循环中保证即可 -->\r\n            <a-radio-group\r\n              @change=\"onRadioChange\"\r\n              v-model=\"radioValue\"\r\n              v-if=\"currentQuestion.type === '单选题' || currentQuestion.type === '判断题'\"\r\n              style=\"user-select: none\"\r\n            >\r\n              <a-radio\r\n                v-for=\"option in currentQuestion.options\"\r\n                :key=\"option.questionOptionId\"\r\n                :style=\"optionStyle\"\r\n                :value=\"option.questionOptionId\"\r\n              >\r\n                {{ option.questionOptionContent }}\r\n              </a-radio>\r\n            </a-radio-group>\r\n\r\n            <!-- 多选题 -->\r\n            <a-checkbox-group @change=\"onCheckChange\" v-model=\"checkValues\" v-if=\"currentQuestion.type === '多选题'\">\r\n              <a-checkbox\r\n                v-for=\"option in currentQuestion.options\"\r\n                :key=\"option.questionOptionId\"\r\n                :style=\"optionStyle\"\r\n                :value=\"option.questionOptionId\"\r\n              >\r\n                {{ option.questionOptionContent }}\r\n              </a-checkbox>\r\n            </a-checkbox-group>\r\n\r\n            <!-- 填空和简答和程序题 -->\r\n            <div\r\n              v-if=\"\r\n                currentQuestion.type === '填空题' ||\r\n                currentQuestion.type === '简答题' ||\r\n                currentQuestion.type === '程序题'\r\n              \"\r\n            >\r\n              <a-textarea placeholder=\"请输入答案\" @change=\"OnInputChange\" v-model=\"inputValue\" />\r\n              <!-- <a-button type=\"primary\" @click=\"saveAnswer()\">保存</a-button>-->\r\n            </div>\r\n          </div>\r\n        </a-layout-content>\r\n        <a-layout-footer :style=\"{ textAlign: 'center' }\">\r\n          <div class=\"copyright\" style=\"user-select: none\">\r\n            Copyright\r\n            <a-icon type=\"copyright\" /> 2022 <span>jkfl</span>\r\n          </div>\r\n        </a-layout-footer>\r\n      </a-layout>\r\n    </a-layout>\r\n\r\n    <!-- 开启笔记工具框的按钮 -->\r\n    <HighlighterButton\r\n      :highlighterBarIsVisible=\"highlighterBarDetail.visible\"\r\n      @changeHighlighterBarVisible=\"changeHighlighterBarVisible\"\r\n    />\r\n\r\n    <!-- 考试工具开启按钮组 -->\r\n    <ExamTools />\r\n  </a-layout>\r\n</template>\r\n\r\n<script>\r\n/* eslint-disable */\r\nimport { getExamDetail, getQuestionDetail, finishExam, getSubDetail, finishSub } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n// 高亮\r\nimport Highlighter from 'web-highlighter'\r\nimport HighlighterBar from '../highlighter/HighlighterBar'\r\nimport HighlighterButton from '../highlighter/HighlighterButton'\r\n// 监考\r\nimport Monitor from '../monitor/Monitor'\r\n// 考试工具\r\nimport ExamTools from '../examTools/ExamTools'\r\n\r\nexport default {\r\n  name: 'ExamDetail',\r\n  components: {\r\n    UserMenu,\r\n    HighlighterBar,\r\n    HighlighterButton,\r\n    Monitor,\r\n    ExamTools,\r\n  },\r\n  data() {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 剩余时间记录\r\n      remainingTime: { hour: 0, minute: 0, second: 0 },\r\n      // 交卷按钮loading (防止重复点击\r\n      handInButtonLoading: false,\r\n      // 高亮对象\r\n      highlighter: new Highlighter({\r\n        exceptSelectors: ['.ant-message span', '#examTools p'], // 主要防止 antd 的 message 提醒的文本被选中\r\n      }),\r\n      // 抽屉工具箱对象\r\n      highlighterBarDetail: {\r\n        visible: false,\r\n        enable: false,\r\n      },\r\n      // 主观题详情对象\r\n      subDetail: {},\r\n      subMap: {},\r\n      openKeys: ['question_radio'],\r\n      rootSubmenuKeys: [\r\n        'question_radio',\r\n        'question_check',\r\n        'question_judge',\r\n        'question_input',\r\n        'question_short_answer',\r\n        'question_program',\r\n      ],\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      inputValue: '',\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px',\r\n      },\r\n      onblurTime: 0,\r\n      isFinished: false,\r\n    }\r\n  },\r\n  mounted() {\r\n    this.subMap = new Map()\r\n    this.answersMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里\r\n    getExamDetail(this.$route.params.id).then((res) => {\r\n      if (res.code === 0) {\r\n        // 赋值考试对象\r\n        console.log(res)\r\n        that.examDetail = res.data\r\n        console.log('@examDetail', this.examDetail)\r\n        this.initRemainingTime(this.examDetail.exam.examTotalTime)\r\n        console.log('remainingTime@', that.remainingTime)\r\n        that.initExam()  // 若考试界面失焦两次则自动交卷\r\n        return res.data\r\n      } else {\r\n        this.$notification.error({\r\n          message: '获取考试详情失败',\r\n          description: res.msg,\r\n        })\r\n      }\r\n    })\r\n    getSubDetail(this.$route.params.id).then((res) => {\r\n      if (res.code === 0) {\r\n        // 赋值考试对象\r\n        console.log(res)\r\n        that.subDetail = res.data\r\n        return res.data\r\n      } else {\r\n        this.$notification.error({\r\n          message: '获取主观题详情失败',\r\n          description: res.msg,\r\n        })\r\n      }\r\n    })\r\n    // 开倒计时定时器\r\n    this.remainingTimer = setInterval(() => {\r\n      this.remainingTime.second--\r\n    }, 1000)\r\n    // 运行文本高亮\r\n    // this.highlighter = new Highlighter({\r\n    //   // exceptSelectors: []\r\n    // })\r\n    // getRemoteData().then(s => highlighter.fromStore(s.startMeta, s.endMeta, s.id, s.text))\r\n    // highlighter.on(Highlighter.event.CREATE, ({sources}) => save(sources))\r\n\r\n    // 开启摄像头\r\n  },\r\n  methods: {\r\n    initExam() {\r\n      const that = this\r\n      window.onblur = function () {\r\n        that.onblurTime++\r\n        if (!that.isFinished) {\r\n          if (that.onblurTime === 3) {\r\n            that.$notification.success({\r\n              message: '你已交卷！',\r\n            })\r\n            that.finishExam()\r\n          } else {\r\n            that.$notification.error({\r\n              message: '考试期间不能离开此页面哦~这一次只是提醒，下次离开就会直接交卷了哦！',\r\n            })\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    getQuestionDetail(questionId, questionType) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.checkValues = []\r\n      getQuestionDetail(questionId, questionType).then((res) => {\r\n        if (res.code === 0) {\r\n          // 赋值当前考试对象\r\n          that.currentQuestion = res.data\r\n          // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n          if (that.answersMap.get(that.currentQuestion.id)) {\r\n            // 说明之前做过这道题了\r\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n            } else if (that.currentQuestion.type === '多选题') {\r\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n            }\r\n          }\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取问题详情失败',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    getSubDetail(sub) {\r\n      const that = this\r\n      that.inputValue = ''\r\n      that.currentQuestion = sub\r\n      // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n      if (that.subMap.get(that.currentQuestion.id)) {\r\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer\r\n      }\r\n      console.log(that.currentQuestion)\r\n    },\r\n    saveAnswer() {\r\n      this.currentQuestion.answer = this.inputValue\r\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion)\r\n      console.log(this.subMap)\r\n    },\r\n    OnInputChange(e) {\r\n      this.currentQuestion.answer = this.inputValue\r\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion)\r\n    },\r\n    onOpenChange(openKeys) {\r\n      const latestOpenKey = openKeys.find((key) => this.openKeys.indexOf(key) === -1)\r\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n        this.openKeys = openKeys\r\n      } else {\r\n        this.openKeys = latestOpenKey ? [latestOpenKey] : []\r\n      }\r\n    },\r\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\r\n    onRadioChange(e) {\r\n      const userOptions = []\r\n      userOptions.push(e.target.value)\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, userOptions)\r\n    },\r\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\r\n    onCheckChange(checkedValues) {\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, checkedValues)\r\n    },\r\n    _strMapToObj(strMap) {\r\n      const obj = Object.create(null)\r\n      for (const [k, v] of strMap) {\r\n        obj[k] = v\r\n      }\r\n      return obj\r\n    },\r\n    /**\r\n     *map转换为json\r\n     */\r\n    _mapToJson(map) {\r\n      return JSON.stringify(this._strMapToObj(map))\r\n    },\r\n    /**\r\n     * 结束考试并交卷\r\n     */\r\n    finishExam() {\r\n      this.handInButtonLoading = true\r\n      // Todo:向后端提交作答信息数组answersMap\r\n      finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then((res) => {\r\n        if (res.code === 0) {\r\n          finishSub(res.data.examRecordId, this._mapToJson(this.subMap)).then((res) => {\r\n            if (res.code === 0) {\r\n              this.$notification.success({\r\n                message: '考卷提交成功！',\r\n                description: res.msg,\r\n              })\r\n              this.isFinished = true\r\n              // 清除定时器\r\n              clearInterval(this.remainingTimer)\r\n              this.$router.push('/list/exam-record-list')\r\n              return res.data\r\n            } else {\r\n              this.handInButtonLoading = false\r\n              this.onblurTime = 0\r\n              this.$notification.error({\r\n                message: '交卷失败！',\r\n                description: res.msg,\r\n              })\r\n            }\r\n          })\r\n          this.$notification.success({\r\n            message: '考卷提交成功！',\r\n            description: res.msg,\r\n          })\r\n          return res.data\r\n        } else {\r\n          this.onblurTime = 0\r\n          this.$notification.error({\r\n            message: '交卷失败！',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    initRemainingTime(totalMinute) {\r\n      this.remainingTime.hour = Math.floor(totalMinute / 60)\r\n      this.remainingTime.minute = totalMinute % 60\r\n    },\r\n\r\n    /**\r\n     * 高亮工具箱\r\n     */\r\n    // showHighlighterBar(isVisible) {\r\n    //   this.highlighterBarDetail.visible = isVisible\r\n    // },\r\n    // closeHighlighterBar() {\r\n    //   this.highlighterBarDetail.visible = false\r\n    // },\r\n    changeHighlighterBarVisible(value) {\r\n      this.highlighterBarDetail.visible = value\r\n    },\r\n    changeHighlighterBarEnable() {\r\n      this.highlighterBarDetail.enable = !this.highlighterBarDetail.enable\r\n    },\r\n    changeHighlighterStyle(className) {\r\n      this.highlighter.painter.options.className = className\r\n    },\r\n  },\r\n  computed: {\r\n    // remainingTime: { minute: 0, second: 0 }\r\n    remainingTimeStr() {\r\n      const paddingZero = (num) => (num >= 10 ? num : `0${num}`)\r\n\r\n      const { hour, minute, second } = this.remainingTime\r\n      return `${paddingZero(hour)}:${paddingZero(minute)}:${paddingZero(second)}`\r\n    },\r\n  },\r\n  watch: {\r\n    remainingTime: {\r\n      handler(newVal, oldVal) {\r\n        const { hour, minute, second } = newVal\r\n\r\n        if (hour == 0 && minute == 0 && second == 0) {\r\n          return this.finishExam()\r\n        }\r\n\r\n        if (second < 0) {\r\n          newVal.second = 59\r\n          newVal.minute--\r\n        }\r\n        if (minute < 0) {\r\n          newVal.minute = 59\r\n          newVal.hour--\r\n        }\r\n        if (hour < 0) {\r\n          newVal.hour = 23\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n    highlighterBarDetail: {\r\n      handler(newVal, oldVal) {\r\n        if (!this.highlighter) return\r\n\r\n        if (newVal.enable) {\r\n          this.highlighter.run()\r\n        } else {\r\n          this.highlighter.stop()\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    this.highlighterBarDetail.enable = false\r\n    next()\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.remainingTimer)\r\n  },\r\n}\r\n</script>\r\n\r\n<style>\r\n/* 引入高亮样式 */\r\n@import '../highlighter/highlighterStyles.less';\r\n\r\n#monitor {\r\n  height: inherit;\r\n  width: 100px;\r\n  position: absolute;\r\n  z-index: 99;\r\n  top: 0px;\r\n  left: 50%;\r\n  transform: translate(-50%, 0);\r\n}\r\n</style>\r\n"]}]}