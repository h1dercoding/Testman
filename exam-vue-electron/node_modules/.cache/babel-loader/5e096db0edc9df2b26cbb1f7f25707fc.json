{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue","mtime":1649699772000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\babel.config.js","mtime":1648627002000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1683967466085},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport _slicedToArray from \"C:/Users/17982/Desktop/Testman/exam-vue-electron/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"C:/Users/17982/Desktop/Testman/exam-vue-electron/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.map\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n/* eslint-disable */\nimport { getExamDetail, getQuestionDetail as _getQuestionDetail, finishExam as _finishExam, getSubDetail, finishSub } from \"../../api/exam\";\nimport UserMenu from \"../../components/tools/UserMenu\";\nimport { mapGetters } from 'vuex'; // 高亮\n\nimport Highlighter from 'web-highlighter';\nimport HighlighterBar from \"../highlighter/HighlighterBar\";\nimport HighlighterButton from \"../highlighter/HighlighterButton\"; // 监考\n\nimport Monitor from \"../monitor/Monitor\"; // 考试工具\n\nimport ExamTools from \"../examTools/ExamTools\";\nexport default {\n  name: 'ExamDetail',\n  components: {\n    UserMenu: UserMenu,\n    HighlighterBar: HighlighterBar,\n    HighlighterButton: HighlighterButton,\n    Monitor: Monitor,\n    ExamTools: ExamTools\n  },\n  data: function data() {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 剩余时间记录\n      remainingTime: {\n        hour: 0,\n        minute: 0,\n        second: 0\n      },\n      // 交卷按钮loading (防止重复点击\n      handInButtonLoading: false,\n      // 高亮对象\n      highlighter: new Highlighter({\n        exceptSelectors: ['.ant-message span', '#examTools p'] // 主要防止 antd 的 message 提醒的文本被选中\n\n      }),\n      // 抽屉工具箱对象\n      highlighterBarDetail: {\n        visible: false,\n        enable: false\n      },\n      // 主观题详情对象\n      subDetail: {},\n      subMap: {},\n      openKeys: ['question_radio'],\n      rootSubmenuKeys: ['question_radio', 'question_check', 'question_judge', 'question_input', 'question_short_answer', 'question_program'],\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      inputValue: '',\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      },\n      onblurTime: 0,\n      isFinished: false\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.subMap = new Map();\n    this.answersMap = new Map();\n    var that = this; // 从后端获取考试的详细信息，渲染到考试详情里\n\n    getExamDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        console.log(res);\n        that.examDetail = res.data;\n        console.log('@examDetail', _this.examDetail);\n\n        _this.initRemainingTime(_this.examDetail.exam.examTotalTime);\n\n        console.log('remainingTime@', that.remainingTime);\n        that.initExam(); // 若考试界面失焦两次则自动交卷\n\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取考试详情失败',\n          description: res.msg\n        });\n      }\n    });\n    getSubDetail(this.$route.params.id).then(function (res) {\n      if (res.code === 0) {\n        // 赋值考试对象\n        console.log(res);\n        that.subDetail = res.data;\n        return res.data;\n      } else {\n        _this.$notification.error({\n          message: '获取主观题详情失败',\n          description: res.msg\n        });\n      }\n    }); // 开倒计时定时器\n\n    this.remainingTimer = setInterval(function () {\n      _this.remainingTime.second--;\n    }, 1000); // 运行文本高亮\n    // this.highlighter = new Highlighter({\n    //   // exceptSelectors: []\n    // })\n    // getRemoteData().then(s => highlighter.fromStore(s.startMeta, s.endMeta, s.id, s.text))\n    // highlighter.on(Highlighter.event.CREATE, ({sources}) => save(sources))\n    // 开启摄像头\n  },\n  methods: _objectSpread(_objectSpread({\n    initExam: function initExam() {\n      var that = this;\n\n      window.onblur = function () {\n        that.onblurTime++;\n\n        if (!that.isFinished) {\n          if (that.onblurTime === 3) {\n            that.$notification.success({\n              message: '你已交卷！'\n            });\n            that.finishExam();\n          } else {\n            that.$notification.error({\n              message: '考试期间不能离开此页面哦~这一次只是提醒，下次离开就会直接交卷了哦！'\n            });\n          }\n        }\n      };\n    }\n  }, mapGetters(['nickname', 'avatar'])), {}, {\n    getQuestionDetail: function getQuestionDetail(questionId, questionType) {\n      var _this2 = this;\n\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      var that = this; // 清空问题绑定的值\n\n      this.radioValue = '';\n      this.checkValues = [];\n\n      _getQuestionDetail(questionId, questionType).then(function (res) {\n        if (res.code === 0) {\n          // 赋值当前考试对象\n          that.currentQuestion = res.data; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n          if (that.answersMap.get(that.currentQuestion.id)) {\n            // 说明之前做过这道题了\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0];\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id));\n            }\n          }\n\n          return res.data;\n        } else {\n          _this2.$notification.error({\n            message: '获取问题详情失败',\n            description: res.msg\n          });\n        }\n      });\n    },\n    getSubDetail: function getSubDetail(sub) {\n      var that = this;\n      that.inputValue = '';\n      that.currentQuestion = sub; // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n\n      if (that.subMap.get(that.currentQuestion.id)) {\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer;\n      }\n\n      console.log(that.currentQuestion);\n    },\n    saveAnswer: function saveAnswer() {\n      this.currentQuestion.answer = this.inputValue;\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion);\n      console.log(this.subMap);\n    },\n    OnInputChange: function OnInputChange(e) {\n      this.currentQuestion.answer = this.inputValue;\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion);\n    },\n    onOpenChange: function onOpenChange(openKeys) {\n      var _this3 = this;\n\n      var latestOpenKey = openKeys.find(function (key) {\n        return _this3.openKeys.indexOf(key) === -1;\n      });\n\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\n        this.openKeys = openKeys;\n      } else {\n        this.openKeys = latestOpenKey ? [latestOpenKey] : [];\n      }\n    },\n\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\n    onRadioChange: function onRadioChange(e) {\n      var userOptions = [];\n      userOptions.push(e.target.value); // 更新做题者选择的答案\n\n      this.answersMap.set(this.currentQuestion.id, userOptions);\n    },\n\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\n    onCheckChange: function onCheckChange(checkedValues) {\n      // 更新做题者选择的答案\n      this.answersMap.set(this.currentQuestion.id, checkedValues);\n    },\n    _strMapToObj: function _strMapToObj(strMap) {\n      var obj = Object.create(null);\n\n      var _iterator = _createForOfIteratorHelper(strMap),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              k = _step$value[0],\n              v = _step$value[1];\n\n          obj[k] = v;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return obj;\n    },\n\n    /**\r\n     *map转换为json\r\n     */\n    _mapToJson: function _mapToJson(map) {\n      return JSON.stringify(this._strMapToObj(map));\n    },\n\n    /**\r\n     * 结束考试并交卷\r\n     */\n    finishExam: function finishExam() {\n      var _this4 = this;\n\n      this.handInButtonLoading = true; // Todo:向后端提交作答信息数组answersMap\n\n      _finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then(function (res) {\n        if (res.code === 0) {\n          finishSub(res.data.examRecordId, _this4._mapToJson(_this4.subMap)).then(function (res) {\n            if (res.code === 0) {\n              _this4.$notification.success({\n                message: '考卷提交成功！',\n                description: res.msg\n              });\n\n              _this4.isFinished = true; // 清除定时器\n\n              clearInterval(_this4.remainingTimer);\n\n              _this4.$router.push('/list/exam-record-list');\n\n              return res.data;\n            } else {\n              _this4.handInButtonLoading = false;\n              _this4.onblurTime = 0;\n\n              _this4.$notification.error({\n                message: '交卷失败！',\n                description: res.msg\n              });\n            }\n          });\n\n          _this4.$notification.success({\n            message: '考卷提交成功！',\n            description: res.msg\n          });\n\n          return res.data;\n        } else {\n          _this4.onblurTime = 0;\n\n          _this4.$notification.error({\n            message: '交卷失败！',\n            description: res.msg\n          });\n        }\n      });\n    },\n    initRemainingTime: function initRemainingTime(totalMinute) {\n      this.remainingTime.hour = Math.floor(totalMinute / 60);\n      this.remainingTime.minute = totalMinute % 60;\n    },\n\n    /**\r\n     * 高亮工具箱\r\n     */\n    // showHighlighterBar(isVisible) {\n    //   this.highlighterBarDetail.visible = isVisible\n    // },\n    // closeHighlighterBar() {\n    //   this.highlighterBarDetail.visible = false\n    // },\n    changeHighlighterBarVisible: function changeHighlighterBarVisible(value) {\n      this.highlighterBarDetail.visible = value;\n    },\n    changeHighlighterBarEnable: function changeHighlighterBarEnable() {\n      this.highlighterBarDetail.enable = !this.highlighterBarDetail.enable;\n    },\n    changeHighlighterStyle: function changeHighlighterStyle(className) {\n      this.highlighter.painter.options.className = className;\n    }\n  }),\n  computed: {\n    // remainingTime: { minute: 0, second: 0 }\n    remainingTimeStr: function remainingTimeStr() {\n      var paddingZero = function paddingZero(num) {\n        return num >= 10 ? num : \"0\".concat(num);\n      };\n\n      var _this$remainingTime = this.remainingTime,\n          hour = _this$remainingTime.hour,\n          minute = _this$remainingTime.minute,\n          second = _this$remainingTime.second;\n      return \"\".concat(paddingZero(hour), \":\").concat(paddingZero(minute), \":\").concat(paddingZero(second));\n    }\n  },\n  watch: {\n    remainingTime: {\n      handler: function handler(newVal, oldVal) {\n        var hour = newVal.hour,\n            minute = newVal.minute,\n            second = newVal.second;\n\n        if (hour == 0 && minute == 0 && second == 0) {\n          return this.finishExam();\n        }\n\n        if (second < 0) {\n          newVal.second = 59;\n          newVal.minute--;\n        }\n\n        if (minute < 0) {\n          newVal.minute = 59;\n          newVal.hour--;\n        }\n\n        if (hour < 0) {\n          newVal.hour = 23;\n        }\n      },\n      deep: true\n    },\n    highlighterBarDetail: {\n      handler: function handler(newVal, oldVal) {\n        if (!this.highlighter) return;\n\n        if (newVal.enable) {\n          this.highlighter.run();\n        } else {\n          this.highlighter.stop();\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  },\n  beforeRouteLeave: function beforeRouteLeave(to, from, next) {\n    this.highlighterBarDetail.enable = false;\n    next();\n  },\n  beforeDestroy: function beforeDestroy() {\n    clearInterval(this.remainingTimer);\n  }\n};",null]}