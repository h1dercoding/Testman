{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamDetail.vue","mtime":1649699772000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1683967466085},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\n/* eslint-disable */\r\nimport { getExamDetail, getQuestionDetail, finishExam, getSubDetail, finishSub } from '../../api/exam'\r\nimport UserMenu from '../../components/tools/UserMenu'\r\nimport { mapGetters } from 'vuex'\r\n// 高亮\r\nimport Highlighter from 'web-highlighter'\r\nimport HighlighterBar from '../highlighter/HighlighterBar'\r\nimport HighlighterButton from '../highlighter/HighlighterButton'\r\n// 监考\r\nimport Monitor from '../monitor/Monitor'\r\n// 考试工具\r\nimport ExamTools from '../examTools/ExamTools'\r\n\r\nexport default {\r\n  name: 'ExamDetail',\r\n  components: {\r\n    UserMenu,\r\n    HighlighterBar,\r\n    HighlighterButton,\r\n    Monitor,\r\n    ExamTools,\r\n  },\r\n  data() {\r\n    return {\r\n      // 考试详情对象\r\n      examDetail: {},\r\n      // 剩余时间记录\r\n      remainingTime: { hour: 0, minute: 0, second: 0 },\r\n      // 交卷按钮loading (防止重复点击\r\n      handInButtonLoading: false,\r\n      // 高亮对象\r\n      highlighter: new Highlighter({\r\n        exceptSelectors: ['.ant-message span', '#examTools p'], // 主要防止 antd 的 message 提醒的文本被选中\r\n      }),\r\n      // 抽屉工具箱对象\r\n      highlighterBarDetail: {\r\n        visible: false,\r\n        enable: false,\r\n      },\r\n      // 主观题详情对象\r\n      subDetail: {},\r\n      subMap: {},\r\n      openKeys: ['question_radio'],\r\n      rootSubmenuKeys: [\r\n        'question_radio',\r\n        'question_check',\r\n        'question_judge',\r\n        'question_input',\r\n        'question_short_answer',\r\n        'question_program',\r\n      ],\r\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\r\n      answersMap: {},\r\n      // 当前用户的问题\r\n      currentQuestion: '',\r\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\r\n      radioValue: '',\r\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\r\n      checkValues: [],\r\n      inputValue: '',\r\n      optionStyle: {\r\n        display: 'block',\r\n        height: '30px',\r\n        lineHeight: '30px',\r\n        marginLeft: '0px',\r\n      },\r\n      onblurTime: 0,\r\n      isFinished: false,\r\n    }\r\n  },\r\n  mounted() {\r\n    this.subMap = new Map()\r\n    this.answersMap = new Map()\r\n    const that = this\r\n    // 从后端获取考试的详细信息，渲染到考试详情里\r\n    getExamDetail(this.$route.params.id).then((res) => {\r\n      if (res.code === 0) {\r\n        // 赋值考试对象\r\n        console.log(res)\r\n        that.examDetail = res.data\r\n        console.log('@examDetail', this.examDetail)\r\n        this.initRemainingTime(this.examDetail.exam.examTotalTime)\r\n        console.log('remainingTime@', that.remainingTime)\r\n        that.initExam()  // 若考试界面失焦两次则自动交卷\r\n        return res.data\r\n      } else {\r\n        this.$notification.error({\r\n          message: '获取考试详情失败',\r\n          description: res.msg,\r\n        })\r\n      }\r\n    })\r\n    getSubDetail(this.$route.params.id).then((res) => {\r\n      if (res.code === 0) {\r\n        // 赋值考试对象\r\n        console.log(res)\r\n        that.subDetail = res.data\r\n        return res.data\r\n      } else {\r\n        this.$notification.error({\r\n          message: '获取主观题详情失败',\r\n          description: res.msg,\r\n        })\r\n      }\r\n    })\r\n    // 开倒计时定时器\r\n    this.remainingTimer = setInterval(() => {\r\n      this.remainingTime.second--\r\n    }, 1000)\r\n    // 运行文本高亮\r\n    // this.highlighter = new Highlighter({\r\n    //   // exceptSelectors: []\r\n    // })\r\n    // getRemoteData().then(s => highlighter.fromStore(s.startMeta, s.endMeta, s.id, s.text))\r\n    // highlighter.on(Highlighter.event.CREATE, ({sources}) => save(sources))\r\n\r\n    // 开启摄像头\r\n  },\r\n  methods: {\r\n    initExam() {\r\n      const that = this\r\n      window.onblur = function () {\r\n        that.onblurTime++\r\n        if (!that.isFinished) {\r\n          if (that.onblurTime === 3) {\r\n            that.$notification.success({\r\n              message: '你已交卷！',\r\n            })\r\n            that.finishExam()\r\n          } else {\r\n            that.$notification.error({\r\n              message: '考试期间不能离开此页面哦~这一次只是提醒，下次离开就会直接交卷了哦！',\r\n            })\r\n          }\r\n        }\r\n      }\r\n    },\r\n    // 从全局变量中获取用户昵称和头像,\r\n    ...mapGetters(['nickname', 'avatar']),\r\n    getQuestionDetail(questionId, questionType) {\r\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\r\n      const that = this\r\n      // 清空问题绑定的值\r\n      this.radioValue = ''\r\n      this.checkValues = []\r\n      getQuestionDetail(questionId, questionType).then((res) => {\r\n        if (res.code === 0) {\r\n          // 赋值当前考试对象\r\n          that.currentQuestion = res.data\r\n          // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n          if (that.answersMap.get(that.currentQuestion.id)) {\r\n            // 说明之前做过这道题了\r\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\r\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\r\n            } else if (that.currentQuestion.type === '多选题') {\r\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\r\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\r\n            }\r\n          }\r\n          return res.data\r\n        } else {\r\n          this.$notification.error({\r\n            message: '获取问题详情失败',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    getSubDetail(sub) {\r\n      const that = this\r\n      that.inputValue = ''\r\n      that.currentQuestion = sub\r\n      // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\r\n      if (that.subMap.get(that.currentQuestion.id)) {\r\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer\r\n      }\r\n      console.log(that.currentQuestion)\r\n    },\r\n    saveAnswer() {\r\n      this.currentQuestion.answer = this.inputValue\r\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion)\r\n      console.log(this.subMap)\r\n    },\r\n    OnInputChange(e) {\r\n      this.currentQuestion.answer = this.inputValue\r\n      this.subMap.set(this.currentQuestion.id, this.currentQuestion)\r\n    },\r\n    onOpenChange(openKeys) {\r\n      const latestOpenKey = openKeys.find((key) => this.openKeys.indexOf(key) === -1)\r\n      if (this.rootSubmenuKeys.indexOf(latestOpenKey) === -1) {\r\n        this.openKeys = openKeys\r\n      } else {\r\n        this.openKeys = latestOpenKey ? [latestOpenKey] : []\r\n      }\r\n    },\r\n    /**\r\n     * 单选题勾选是触发的变化事件\r\n     * @param e\r\n     */\r\n    onRadioChange(e) {\r\n      const userOptions = []\r\n      userOptions.push(e.target.value)\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, userOptions)\r\n    },\r\n    /**\r\n     * 多选题触发的变化事件\r\n     * @param checkedValues\r\n     */\r\n    onCheckChange(checkedValues) {\r\n      // 更新做题者选择的答案\r\n      this.answersMap.set(this.currentQuestion.id, checkedValues)\r\n    },\r\n    _strMapToObj(strMap) {\r\n      const obj = Object.create(null)\r\n      for (const [k, v] of strMap) {\r\n        obj[k] = v\r\n      }\r\n      return obj\r\n    },\r\n    /**\r\n     *map转换为json\r\n     */\r\n    _mapToJson(map) {\r\n      return JSON.stringify(this._strMapToObj(map))\r\n    },\r\n    /**\r\n     * 结束考试并交卷\r\n     */\r\n    finishExam() {\r\n      this.handInButtonLoading = true\r\n      // Todo:向后端提交作答信息数组answersMap\r\n      finishExam(this.$route.params.id, this._mapToJson(this.answersMap)).then((res) => {\r\n        if (res.code === 0) {\r\n          finishSub(res.data.examRecordId, this._mapToJson(this.subMap)).then((res) => {\r\n            if (res.code === 0) {\r\n              this.$notification.success({\r\n                message: '考卷提交成功！',\r\n                description: res.msg,\r\n              })\r\n              this.isFinished = true\r\n              // 清除定时器\r\n              clearInterval(this.remainingTimer)\r\n              this.$router.push('/list/exam-record-list')\r\n              return res.data\r\n            } else {\r\n              this.handInButtonLoading = false\r\n              this.onblurTime = 0\r\n              this.$notification.error({\r\n                message: '交卷失败！',\r\n                description: res.msg,\r\n              })\r\n            }\r\n          })\r\n          this.$notification.success({\r\n            message: '考卷提交成功！',\r\n            description: res.msg,\r\n          })\r\n          return res.data\r\n        } else {\r\n          this.onblurTime = 0\r\n          this.$notification.error({\r\n            message: '交卷失败！',\r\n            description: res.msg,\r\n          })\r\n        }\r\n      })\r\n    },\r\n    initRemainingTime(totalMinute) {\r\n      this.remainingTime.hour = Math.floor(totalMinute / 60)\r\n      this.remainingTime.minute = totalMinute % 60\r\n    },\r\n\r\n    /**\r\n     * 高亮工具箱\r\n     */\r\n    // showHighlighterBar(isVisible) {\r\n    //   this.highlighterBarDetail.visible = isVisible\r\n    // },\r\n    // closeHighlighterBar() {\r\n    //   this.highlighterBarDetail.visible = false\r\n    // },\r\n    changeHighlighterBarVisible(value) {\r\n      this.highlighterBarDetail.visible = value\r\n    },\r\n    changeHighlighterBarEnable() {\r\n      this.highlighterBarDetail.enable = !this.highlighterBarDetail.enable\r\n    },\r\n    changeHighlighterStyle(className) {\r\n      this.highlighter.painter.options.className = className\r\n    },\r\n  },\r\n  computed: {\r\n    // remainingTime: { minute: 0, second: 0 }\r\n    remainingTimeStr() {\r\n      const paddingZero = (num) => (num >= 10 ? num : `0${num}`)\r\n\r\n      const { hour, minute, second } = this.remainingTime\r\n      return `${paddingZero(hour)}:${paddingZero(minute)}:${paddingZero(second)}`\r\n    },\r\n  },\r\n  watch: {\r\n    remainingTime: {\r\n      handler(newVal, oldVal) {\r\n        const { hour, minute, second } = newVal\r\n\r\n        if (hour == 0 && minute == 0 && second == 0) {\r\n          return this.finishExam()\r\n        }\r\n\r\n        if (second < 0) {\r\n          newVal.second = 59\r\n          newVal.minute--\r\n        }\r\n        if (minute < 0) {\r\n          newVal.minute = 59\r\n          newVal.hour--\r\n        }\r\n        if (hour < 0) {\r\n          newVal.hour = 23\r\n        }\r\n      },\r\n      deep: true,\r\n    },\r\n    highlighterBarDetail: {\r\n      handler(newVal, oldVal) {\r\n        if (!this.highlighter) return\r\n\r\n        if (newVal.enable) {\r\n          this.highlighter.run()\r\n        } else {\r\n          this.highlighter.stop()\r\n        }\r\n      },\r\n      deep: true,\r\n      immediate: true,\r\n    },\r\n  },\r\n  beforeRouteLeave(to, from, next) {\r\n    this.highlighterBarDetail.enable = false\r\n    next()\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.remainingTimer)\r\n  },\r\n}\r\n",null]}