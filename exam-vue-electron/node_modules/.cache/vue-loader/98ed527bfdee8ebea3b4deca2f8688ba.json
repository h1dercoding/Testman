{"remainingRequest":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamRecordDetail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\src\\views\\list\\ExamRecordDetail.vue","mtime":1648630258000},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\babel-loader\\lib\\index.js","mtime":1683967472581},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1683967470734},{"path":"C:\\Users\\17982\\Desktop\\Testman\\exam-vue-electron\\node_modules\\vue-loader\\lib\\index.js","mtime":1683967474246}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { getExamDetail, getQuestionDetail, getExamRecordDetail, getSubDetail } from '../../api/exam'\nimport UserMenu from '../../components/tools/UserMenu'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ExamRecordDetail',\n  components: {\n    UserMenu\n  },\n  data () {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 主观题详情对象\n      subDetail: {},\n      // 考试记录详情对象\n      recordDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 题目的正确答案\n      answersRightMap: {},\n      // 题目的作答结果(正确或错误)\n      resultsMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\n      radioRightValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\n      checkRightValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    }\n  },\n  computed: {\n    /**\n     * 当前题目用户是否作答正确\n     * */\n    questionRight () {\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True'\n    }\n  },\n  mounted () {\n    this.answersMap = new Map()\n    this.answersRightMap = new Map()\n    this.resultsMap = new Map()\n    const that = this\n    // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\n    getExamDetail(this.$route.params.exam_id)\n      .then(res => {\n        if (res.code === 0) {\n          // 赋值考试对象\n          that.examDetail = res.data\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取考试详情失败',\n            description: res.msg\n          })\n        }\n      })\n    getSubDetail(this.$route.params.exam_id)\n      .then(res => {\n        if (res.code === 0) {\n          // 赋值考试对象\n          console.log(res)\n          that.subDetail = res.data\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取主观题详情失败',\n            description: res.msg\n          })\n        }\n      })\n    // 查看考试记录详情，渲染到前端界面\n    getExamRecordDetail(this.$route.params.record_id)\n      .then(res => {\n        if (res.code === 0) {\n          console.log(res.data)\n          // 赋值考试对象\n          that.recordDetail = res.data\n          // 赋值用户的作答答案\n          that.objToMap()\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取考试记录详情失败',\n            description: res.msg\n          })\n        }\n      })\n  },\n  methods: {\n    // 从全局变量中获取用户昵称和头像,\n    ...mapGetters(['nickname', 'avatar']),\n    /**\n     * 把后端传过来的对象Object转换成Map\n     **/\n    objToMap () {\n      for (const item in this.recordDetail.answersMap) {\n        this.answersMap.set(item, this.recordDetail.answersMap[item])\n      }\n\n      for (const item in this.recordDetail.answersRightMap) {\n        this.answersRightMap.set(item, this.recordDetail.answersRightMap[item])\n      }\n\n      for (const item in this.recordDetail.resultsMap) {\n        this.resultsMap.set(item, this.recordDetail.resultsMap[item])\n      }\n    },\n    getQuestionDetail (questionId, type) {\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      const that = this\n      // 清空问题绑定的值\n      this.radioValue = ''\n      this.radioRightValue = ''\n      this.checkValues = []\n      this.checkRightValues = []\n      getQuestionDetail(questionId, type)\n        .then(res => {\n          if (res.code === 0) {\n            // 赋值当前考试对象\n            that.currentQuestion = res.data\n\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0]\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id))\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\n            }\n\n            return res.data\n          } else {\n            this.$notification.error({\n              message: '获取问题详情失败',\n              description: res.msg\n            })\n          }\n        })\n    },\n    getSubDetail (sub) {\n      const that = this\n      that.inputValue = ''\n      that.currentQuestion = sub\n      // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n      if (that.subMap.get(that.currentQuestion.id)) {\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer\n      }\n      console.log(that.currentQuestion)\n    }\n  }\n}\n",{"version":3,"sources":["ExamRecordDetail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"ExamRecordDetail.vue","sourceRoot":"src/views/list","sourcesContent":["<template>\n  <a-layout>\n    <a-layout-header class=\"header\" style=\"color: #fff\">\n      <!--   v-if=\"examDetail.exam\" 是为了防止 异步请求时页面渲染的时候还没有拿到这个值而报错， 下面多处这个判断都是这个道理 -->\n      <span style=\"font-size:25px;margin-left: 0px;\" v-if=\"examDetail.exam\">\n        <!--        <a-avatar slot=\"avatar\" size=\"large\" shape=\"circle\" :src=\"examDetail.exam.examAvatar | imgSrcFilter\"/>-->\n        {{ examDetail.exam.examSource }}\n        <span style=\"font-size:15px;\">{{ examDetail.exam.examDescription }} </span>\n      </span>\n      <span style=\"float: right;\">\n        <span style=\"margin-right: 40px; font-size: 20px\" v-if=\"recordDetail.examRecord\">\n          客观题得分：<span style=\"color: red\">{{ recordDetail.examRecord.examJoinScore }}</span>&nbsp;分&nbsp;\n          <span style=\"font-size:15px;\">参加考试时间：{{ recordDetail.examRecord.examJoinDate }}</span>\n        </span>\n        <a-avatar class=\"avatar\" size=\"small\" :src=\"avatar()\"/>\n        <span style=\"margin-left: 12px\">{{ nickname() }}</span>\n      </span>\n    </a-layout-header>\n    <a-layout>\n      <a-layout-sider width=\"220\" :style=\"{background: '#444',overflow: 'auto', height: '95vh', position: 'fixed', left: 0 }\">\n        <a-menu\n          mode=\"inline\"\n          :defaultSelectedKeys=\"['1']\"\n          :defaultOpenKeys=\"['question_radio', 'question_check', 'question_judge', 'question_input', 'question_short_answer', 'question_program']\"\n          :style=\"{ height: '100%', borderRight: 0 }\"\n        >\n          <a-sub-menu key=\"question_radio\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-circle\" theme=\"twoTone\"/>单选题(每题{{ currentQuestion.sqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in examDetail.radioIds\" :key=\"item\" @click=\"getQuestionDetail(item, 1)\">\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n          <a-sub-menu key=\"question_check\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"check-square\" theme=\"twoTone\"/>多选题(每题{{ currentQuestion.mqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in examDetail.checkIds\" :key=\"item\" @click=\"getQuestionDetail(item, 2)\">\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n          <a-sub-menu key=\"question_judge\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"like\" theme=\"twoTone\"/>判断题(每题{{ currentQuestion.jqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in examDetail.judgeIds\" :key=\"item\" @click=\"getQuestionDetail(item, 3)\">\n              <a-icon type=\"check\" v-if=\"resultsMap.get(item)==='True'\"/>\n              <a-icon type=\"close\" v-if=\"resultsMap.get(item)==='False'\"/>\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n          <a-sub-menu key=\"question_input\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"eye\" theme=\"twoTone\"/>填空题(每题{{ currentQuestion.iqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in subDetail\" :key=\"index\" v-if=\"item.type === '填空题'\" @click=\"getSubDetail(item)\">\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n          <a-sub-menu key=\"question_short_answer\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"eye\" theme=\"twoTone\"/>简答题(每题{{ currentQuestion.saqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in subDetail\" :key=\"index\" v-if=\"item.type === '简答题'\" @click=\"getSubDetail(item)\">\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n          <a-sub-menu key=\"question_program\">\n            <span slot=\"title\" v-if=\"examDetail.exam\"><a-icon type=\"eye\" theme=\"twoTone\"/>程序题(每题{{ currentQuestion.pqScore }}分)</span>\n            <a-menu-item v-for=\"(item, index) in subDetail\" :key=\"index\" v-if=\"item.type === '程序题'\" @click=\"getSubDetail(item)\">\n              题目{{ index + 1 }}\n            </a-menu-item>\n          </a-sub-menu>\n        </a-menu>\n      </a-layout-sider>\n      <a-layout :style=\"{ marginLeft: '230px' }\">\n        <a-layout-content :style=\"{ margin: '24px 16px 0',height: '84vh', overflow: 'initial' }\">\n          <div :style=\"{ padding: '24px', background: '#fff',height: '84vh'}\">\n            <span v-if=\"currentQuestion === ''\" style=\"font-size: 30px;font-family: Consolas\">欢迎查看本次考试情况，点击左侧题目编号可以查看答题详情</span>\n            <span v-if=\"currentQuestion !== ''\">\n              <strong>{{ currentQuestion.type }} </strong> <p v-html=\"currentQuestion.name\"></p>\n              <strong style=\"color: green;\" v-if=\"questionRight\">本题您答对啦！</strong>\n              <strong style=\"color: red;\" v-if=\"!questionRight && (currentQuestion.type === '单选题' || currentQuestion.type === '多选题' || currentQuestion.type === '判选题')\">本题您答错啦！</strong>\n            </span>\n            <br><br>\n            <!-- 单选题和判断题 --> <!-- key不重复只需要在一个for循环中保证即可 -->\n            <a-radio-group v-model=\"radioValue\" v-if=\"currentQuestion.type === '单选题' || currentQuestion.type === '判断题'\">\n              <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\n                {{ option.questionOptionContent }}\n              </a-radio>\n            </a-radio-group>\n\n            <!-- 题目出错的时候才显示这块 -->\n            <div v-if=\"!questionRight && currentQuestion!=='' && (currentQuestion.type === '单选题' || currentQuestion.type === '判断题')\">\n              <span style=\"color: red;\"><br/>正确答案是：<br/></span>\n              <a-radio-group v-model=\"radioRightValue\">\n                <a-radio v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\n                  {{ option.questionOptionContent }}\n                </a-radio>\n              </a-radio-group>\n            </div>\n\n            <!-- 多选题 -->\n            <a-checkbox-group v-model=\"checkValues\" v-if=\"currentQuestion.type === '多选题'\">\n              <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\n                {{ option.questionOptionContent }}\n              </a-checkbox>\n            </a-checkbox-group>\n\n            <!-- 题目出错的时候才显示这块 -->\n            <div v-if=\"!questionRight && currentQuestion!=='' && currentQuestion.type === '多选题'\">\n              <span style=\"color: red;\"><br/>正确答案是：<br/></span>\n              <a-checkbox-group v-model=\"checkRightValues\">\n                <a-checkbox v-for=\"option in currentQuestion.options\" :key=\"option.questionOptionId\" :style=\"optionStyle\" :value=\"option.questionOptionId\">\n                  {{ option.questionOptionContent }}\n                </a-checkbox>\n              </a-checkbox-group>\n            </div>\n\n            <span style=\"color: red;\"><br/>答案解析：<br/></span>\n            <p v-html=\"currentQuestion.description\"></p>\n          </div>\n        </a-layout-content>\n        <a-layout-footer :style=\"{ textAlign: 'center' }\">\n          <div class=\"copyright\">\n            Copyright\n            <a-icon type=\"copyright\" /> 2022 <span>jkfl</span>\n          </div>\n        </a-layout-footer>\n      </a-layout>\n    </a-layout>\n  </a-layout>\n</template>\n\n<script>\nimport { getExamDetail, getQuestionDetail, getExamRecordDetail, getSubDetail } from '../../api/exam'\nimport UserMenu from '../../components/tools/UserMenu'\nimport { mapGetters } from 'vuex'\n\nexport default {\n  name: 'ExamRecordDetail',\n  components: {\n    UserMenu\n  },\n  data () {\n    return {\n      // 考试详情对象\n      examDetail: {},\n      // 主观题详情对象\n      subDetail: {},\n      // 考试记录详情对象\n      recordDetail: {},\n      // 用户做过的问题都放到这个数组中，键为问题id, 值为currentQuestion(其属性answers属性用于存放答案选项地id或ids),，用于存放用户勾选的答案\n      answersMap: {},\n      // 题目的正确答案\n      answersRightMap: {},\n      // 题目的作答结果(正确或错误)\n      resultsMap: {},\n      // 当前用户的问题\n      currentQuestion: '',\n      // 单选或判断题的绑定值，用于从answersMap中初始化做题状态\n      radioValue: '',\n      // 单选题的正确答案，用于从answersRightMap中初始化做题状态\n      radioRightValue: '',\n      // 多选题的绑定值，用于从answersMap中初始化做题状态\n      checkValues: [],\n      // 多选题的绑定值，用于从answersRightMap中初始化做题状态\n      checkRightValues: [],\n      optionStyle: {\n        display: 'block',\n        height: '30px',\n        lineHeight: '30px',\n        marginLeft: '0px'\n      }\n    }\n  },\n  computed: {\n    /**\n     * 当前题目用户是否作答正确\n     * */\n    questionRight () {\n      return this.resultsMap !== '' && this.resultsMap.get(this.currentQuestion.id) === 'True'\n    }\n  },\n  mounted () {\n    this.answersMap = new Map()\n    this.answersRightMap = new Map()\n    this.resultsMap = new Map()\n    const that = this\n    // 从后端获取考试的详细信息，渲染到考试详情里,需要加个延时，要不拿不到参数\n    getExamDetail(this.$route.params.exam_id)\n      .then(res => {\n        if (res.code === 0) {\n          // 赋值考试对象\n          that.examDetail = res.data\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取考试详情失败',\n            description: res.msg\n          })\n        }\n      })\n    getSubDetail(this.$route.params.exam_id)\n      .then(res => {\n        if (res.code === 0) {\n          // 赋值考试对象\n          console.log(res)\n          that.subDetail = res.data\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取主观题详情失败',\n            description: res.msg\n          })\n        }\n      })\n    // 查看考试记录详情，渲染到前端界面\n    getExamRecordDetail(this.$route.params.record_id)\n      .then(res => {\n        if (res.code === 0) {\n          console.log(res.data)\n          // 赋值考试对象\n          that.recordDetail = res.data\n          // 赋值用户的作答答案\n          that.objToMap()\n          return res.data\n        } else {\n          this.$notification.error({\n            message: '获取考试记录详情失败',\n            description: res.msg\n          })\n        }\n      })\n  },\n  methods: {\n    // 从全局变量中获取用户昵称和头像,\n    ...mapGetters(['nickname', 'avatar']),\n    /**\n     * 把后端传过来的对象Object转换成Map\n     **/\n    objToMap () {\n      for (const item in this.recordDetail.answersMap) {\n        this.answersMap.set(item, this.recordDetail.answersMap[item])\n      }\n\n      for (const item in this.recordDetail.answersRightMap) {\n        this.answersRightMap.set(item, this.recordDetail.answersRightMap[item])\n      }\n\n      for (const item in this.recordDetail.resultsMap) {\n        this.resultsMap.set(item, this.recordDetail.resultsMap[item])\n      }\n    },\n    getQuestionDetail (questionId, type) {\n      // 问题切换时从后端拿到问题详情，渲染到前端content中\n      const that = this\n      // 清空问题绑定的值\n      this.radioValue = ''\n      this.radioRightValue = ''\n      this.checkValues = []\n      this.checkRightValues = []\n      getQuestionDetail(questionId, type)\n        .then(res => {\n          if (res.code === 0) {\n            // 赋值当前考试对象\n            that.currentQuestion = res.data\n\n            if (that.currentQuestion.type === '单选题' || that.currentQuestion.type === '判断题') {\n              that.radioRightValue = that.answersRightMap.get(that.currentQuestion.id)[0]\n              that.radioValue = that.answersMap.get(that.currentQuestion.id)[0]\n            } else if (that.currentQuestion.type === '多选题') {\n              // 数组是引用类型，因此需要进行拷贝，千万不要直接赋值\n              Object.assign(that.checkRightValues, that.answersRightMap.get(that.currentQuestion.id))\n              Object.assign(that.checkValues, that.answersMap.get(that.currentQuestion.id))\n            }\n\n            return res.data\n          } else {\n            this.$notification.error({\n              message: '获取问题详情失败',\n              description: res.msg\n            })\n          }\n        })\n    },\n    getSubDetail (sub) {\n      const that = this\n      that.inputValue = ''\n      that.currentQuestion = sub\n      // 查看用户是不是已经做过这道题又切换回来的，answersMap中查找，能找到这个题目id对应的值数组不为空说明用户做过这道题\n      if (that.subMap.get(that.currentQuestion.id)) {\n        that.inputValue = that.subMap.get(that.currentQuestion.id).answer\n      }\n      console.log(that.currentQuestion)\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}